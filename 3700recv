#!/usr/bin/env python3

import sys
import socket
import datetime
import json

class Packet:

  def __init__(self, seqn, len, data):
    self.seqn = int(seqn)
    self.len = int(len)
    self.data = data

  def __eq__(self, other):
    if isinstance(other, Packet):
        return self.seqn == other.seqn and self.len == other.len
    return False

  def __hash__(self):
    return hash(("seqn",self.seqn,"len",self.len))


class Receiver:

  def __init__(self):
    self.msg_size = 1500
    self.timeout = 30
    self.packet_buffer = [] # Keeps track of all the unordered packets received
    self.ordered_list = [] # Keeps track of how many packages we've correctly received in ordered
    self.packet_count = 0
    self.window_size = 300
    self.ack_size = 5
    self.consecutive_ignores = 0
  
  def log(self, string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
    sys.stderr.flush()
  
  def is_message_complete(self):
    return not self.packet_buffer and self.ordered_list
  
  # Helper to sort a list in place
  def sorted_insert(self, buffer, packet):
    if not self.check_packet_in_list(packet,buffer):
      buffer.append(packet)
      buffer = sorted(buffer, key = lambda i: i.seqn)

  # Ensures that a packet is only added to ordered_list when it is the next in line
  def packet_follows_left_edge(self,packet):
    if not self.ordered_list:
      return packet.seqn == 0
    else:
      return self.get_left_edge() == packet.seqn

  # Adds packets to self.ordered_list from self.packet_buffer
  # Removes packets from packet_buffer if they are in ordered_list
  def coalesce(self):
    for packet in sorted(self.packet_buffer, key= lambda packet:packet.seqn):
      if not self.packet_follows_left_edge(packet):
        break
      else:
        self.sorted_insert(self.ordered_list,packet)
        self.packet_buffer.remove(packet)

    
  # Handles the packet_buffer list and decides when to ack and add to ordered_list
  # def handle_packet(self, packet):
    
  #   if self.get_left_edge() == p.seqn:
  #     self.sorted_insert(self.ordered_list,p)
  #   else:
  #     self.sorted_insert(self.packet_buffer,p)

  def get_left_edge(self):
    if not self.ordered_list:
      return 0
    else:
      leftmost = self.ordered_list[-1]
      left_seq = leftmost.seqn
      data_size = leftmost.len
      return left_seq + data_size

  def is_ordered_packet(self, packet):
    if not self.ordered_list:
      return int(packet["sequence"]) == 0
    else: 
      return self.get_left_edge() == int(packet["sequence"])

  def check_packet_in_list(self,packet,list):
    for p in list:
      if p.seqn == packet.seqn and p.len == packet.len:
        return True
    
    return False


  def is_duplicate(self, packet):
    p = Packet(packet["sequence"],len(packet["data"]), packet["data"])
    return self.check_packet_in_list(p,self.packet_buffer) or \
           self.check_packet_in_list(p,self.ordered_list)

  def get_list_sequence(self, list):
    return [packet.seqn for packet in list]

  def is_consecutive(self):
    self.consecutive_ignores += 1
    return self.consecutive_ignores > (self.window_size * 2)

  def write_out(self):
    for packet in self.ordered_list:
      sys.stdout.write(packet.data)


  def main(self):
    # Bind to localhost and an ephemeral port
    udp_ip = "127.0.0.1"
    udp_port = 0
  
    # Set up the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((udp_ip, udp_port))
    sock.settimeout(self.timeout)
  
    # Get port we bound to
    udp_port = sock.getsockname()[1]
    self.log(f"[bound] {udp_port}")
  
    # Now listen for packets
    while True:
      result = sock.recvfrom(self.msg_size)
  
      # If nothing is ready, we hit the timeout
      if result:
        (data, addr) = result
        data = data.decode('ascii')
  
        try:
          decoded = json.loads(data)

          # msg = {"sequence": seqn, "data": "", "ack": False, "eof": False}
          # If the EOF flag is set, exit
          if decoded['eof'] and self.is_message_complete():
            msg = json.dumps({"ack": self.get_left_edge()})
            for _ in range(0,self.window_size):
              if sock.sendto(msg.encode('ascii'), addr) < len(msg):
                self.log("[error] unable to fully send packet")
            self.write_out()
            self.log("[completed]")
            sys.exit(0)
  
          # If there is data, we accept it and print it out
          if decoded['data']:
          
            if self.is_duplicate(decoded):
              if self.is_consecutive():
                self.write_out()
                self.log("[completed]")
                sys.exit(0)
              else:
                msg = json.dumps({"ack": self.get_left_edge(),
                              "unordered_sent_packages": self.get_list_sequence(self.packet_buffer)})
                if sock.sendto(msg.encode('ascii'), addr) < len(msg):
                  self.log("[error] unable to fully send packet")
                self.log("IGNORED")
                continue
            
            self.consecutive_ignores = 0
            self.packet_count += 1

            #handle the packet received
            p = Packet(decoded["sequence"],len(decoded["data"]),decoded["data"])
            if self.is_ordered_packet(decoded):
              self.sorted_insert(self.ordered_list,p)
              self.log(f"[recv data] {decoded['sequence']} ({len(decoded['data'])}) ACCEPTED (in-order)")
            else:
              self.sorted_insert(self.packet_buffer,p)
              self.log(f"[recv data] {decoded['sequence']} ({len(decoded['data'])}) ACCEPTED (out-of-order)")

            self.coalesce()

          # Send back an ack to the sender
          if self.packet_count % self.ack_size == 0:
            msg = json.dumps({"ack": self.get_left_edge(),
                              "unordered_sent_packages": self.get_list_sequence(self.packet_buffer)})
            self.log("ABOUT TO SEND " + msg)
            if sock.sendto(msg.encode('ascii'), addr) < len(msg):
              self.log("[error] unable to fully send packet")
  
        except (ValueError, KeyError, TypeError) as exc:
          self.log("[recv corrupt packet]")
          raise exc
      else:
        self.log("[error] timeout")
        sys.exit(-1)
  
if __name__ == '__main__':
  r = Receiver()
  r.main()
  